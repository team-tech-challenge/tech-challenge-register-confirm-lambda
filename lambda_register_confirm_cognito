
import json
import boto3
import hmac
import hashlib
import base64
import os
import psycopg2
from botocore.exceptions import ClientError

cognito = boto3.client('cognito-idp')

def calculate_secret_hash(client_id, client_secret, username):
    message = username + client_id
    dig = hmac.new(
        str(client_secret).encode('utf-8'),
        msg=str(message).encode('utf-8'),
        digestmod=hashlib.sha256
    ).digest()
    return base64.b64encode(dig).decode()

def get_secret(secret_name):
    # Create a Secrets Manager client
    client = boto3.client('secretsmanager')

    try:
        # Retrieve the secret value
        get_secret_value_response = client.get_secret_value(SecretId=secret_name)
        secret = json.loads(get_secret_value_response['SecretString'])
        return secret
    except ClientError as e:
        raise Exception(f"Error retrieving secret: {e}")

def lambda_handler(event, context):
    body = event['body']
    username = body['username']
    confirmation_code = body['confirmation_code']

    client_id = os.environ['client_id']
    client_secret = os.environ['client_secret']
    secret_name = os.environ['secret_name']  # The name of the secret in Secrets Manager

    secret_hash = calculate_secret_hash(client_id, client_secret, username)

    try:
        # Confirm the user's sign-up
        cognito.confirm_sign_up(
            ClientId=client_id,
            Username=username,
            ConfirmationCode=confirmation_code,
            SecretHash=secret_hash
        )

        # Retrieve database credentials from Secrets Manager
        secret = get_secret(secret_name)
        db_host = secret['host']
        db_name = secret['dbname']
        db_user = secret['username']
        db_password = secret['password']
        db_port = secret.get('port', 5432)  # Default PostgreSQL port

        # Connect to the PostgreSQL database
        connection = psycopg2.connect(
            host=db_host,
            database=db_name,
            user=db_user,
            password=db_password,
            port=db_port
        )
        cursor = connection.cursor()

        # Insert the user into the customer table
        insert_query = """
        INSERT INTO customer (username) VALUES (%s)
        """
        cursor.execute(insert_query, (username,))
        connection.commit()

        cursor.close()
        connection.close()

        return {
            'statusCode': 200,
            'body': json.dumps({'message': 'User confirmed and registered successfully'})
        }
    except ClientError as error:
        return {
            'statusCode': 400,
            'body': json.dumps({'error': error.response['Error']['Message']})
        }
    except psycopg2.Error as db_error:
        return {
            'statusCode': 500,
            'body': json.dumps({'error': str(db_error)})
        }
